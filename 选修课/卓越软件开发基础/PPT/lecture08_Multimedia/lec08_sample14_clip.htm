<!DOCTYPE html>
<html>
 <head>
    <title>Lecture8 Sample</title>
    <style>
		canvas{border: solid 2pt;}
    </style>
 </head>
 <body>

    <canvas id="drawing" width="400" height="400">Your browser doesn't support the canvas tag.</canvas>
    <script type="text/javascript">
		// Define a regular polygon with n sides, centered at (x,y) with radius r.
		// The vertices are equally spaced along the circumference of a circle.
		// Put the first vertex straight up or at the specified angle.
		// Rotate clockwise, unless the last argument is true.
		function polygon(c,n,x,y,r,angle,counterclockwise) {
			angle = angle || 0;
			counterclockwise = counterclockwise || false;
			c.moveTo(x + r*Math.sin(angle),  // Begin a new subpath at the first vertex
					 y - r*Math.cos(angle)); // Use trigonometry to compute position
			var delta = 2*Math.PI/n;         // Angular distance between vertices
			for(var i = 1; i < n; i++) {     // For each of the remaining vertices
				angle += counterclockwise?-delta:delta; // Adjust angle
				c.lineTo(x + r*Math.sin(angle),         // Add line to next vertex
						 y - r*Math.cos(angle));
			}
			c.closePath();                   // Connect last vertex back to the first
		}
		
		window.onload = function(){
            var drawing = document.getElementById("drawing");
            
            //make sure <canvas> is completely supported
            if (drawing.getContext){
            
                var context = drawing.getContext("2d");
				
				context.font = "bold 60pt sans-serif";
				context.lineWidth = 2; // Narrow lines
                context.strokeStyle = "#000"; // Black lines

				// Outline a rectangle and some text
				context.strokeRect(175, 25, 50, 325); // A vertical stripe down the middle
				context.strokeText("<canvas>", 15, 330); // Note strokeText() instead of fillText()
				
				// Define a complex path with an interior that is outside.
				polygon(context,3,200,225,200); // Large triangle
				polygon(context,3,200,225,100,0,true); // Smaller reverse triangle inside
                
                // Make that path the clipping region.
				context.clip();
				// Stroke the path with a 5 pixel line, entirely inside the clipping region.

				context.lineWidth = 10; // Half of this 10 pixel line will be clipped away
				context.stroke();
				
				// Fill the parts of the rectangle and text that are inside the clipping region
				context.fillStyle = "#aaa" // Light gray
				context.fillRect(175, 25, 50, 325); // Fill the vertical stripe
				context.fillStyle = "#888" // Darker gray
				context.fillText("<canvas>", 15, 330); // Fill the text
				
            }                
        };

    </script>
 </body>
</html>